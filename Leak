
local library =
loadstring(game:HttpGet("https://pastebin.com/raw/B7uxia49", true))()
local window = library:CreateWindow("matty-priv", Vector2.new(492, 598), Enum.KeyCode.RightShift)
local tab = window:CreateTab("Legit")


local sector = tab:CreateSector("Silent Aim")
local sector2 = tab:CreateSector("Fov")










local Aiming = loadstring(game:HttpGet("https://pastebin.com/raw/B7uxia49"))()
    Aiming.TeamCheck(false)
    
    
    local Workspace = game:GetService("Workspace")
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    
    
    local LocalPlayer = Players.LocalPlayer
    local Mouse = LocalPlayer:GetMouse()
    local CurrentCamera = Workspace.CurrentCamera
    
    local DaHoodSettings = {
        SilentAim = false,
        AimLock = false,
        Prediction = 0.14,
        AimLockKeybind = Enum.KeyCode.E
    }
    getgenv().DaHoodSettings = DaHoodSettings
    
    
    function Aiming.Check()
    -------------
        if not (Aiming.Enabled == true and Aiming.Selected ~= LocalPlayer and Aiming.SelectedPart ~= nil) then
            return false
        end
    
        -- // Check if downed
        local Character = Aiming.Character(Aiming.Selected)
        local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
        local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
    
        -- // Check B
        if (KOd or Grabbed) then
            return false
        end
    
        -- //
        return true
    end
    
    -- // Hook
    local __index
    __index = hookmetamethod(game, "__index", function(t, k)
        -- // Check if it trying to get our mouse's hit or target and see if we can use it
        if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and Aiming.Check()) then
            local SelectedPart = Aiming.SelectedPart
    
            -- // Hit/Target
            if (DaHoodSettings.SilentAim and (k == "Hit" or k == "Target")) then
                -- // Hit to account prediction
                local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)
    
                -- // Return modded val
                return (k == "Hit" and Hit or SelectedPart)
            end
        end
    
        -- // Return
        return __index(t, k)
    end)
    
    -- // Aimlock
    RunService:BindToRenderStep("AimLock", 0, function()
        if (DaHoodSettings.AimLock and Aiming.Check() and UserInputService:IsKeyDown(DaHoodSettings.AimLockKeybind)) then
            -- // Vars
            local SelectedPart = Aiming.SelectedPart
    
            -- // Hit to account prediction
            local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)
    
            CurrentCamera.CFrame = CFrame.lookAt(CurrentCamera.CFrame.Position, Hit.Position)
        end
        end)
    
    
    



    local toggle2 = sector:AddToggle("Enabled", false, function(SetTrue)
        DaHoodSettings.SilentAim = SetTrue
    end)
    toggle2:AddKeybind()
    
    local toggle12 = sector:AddToggle("Wall Check", false, function(SetWall)
        Aiming.VisibleCheck = SetWall
    end)
    
    local toggle13 = sector:AddToggle("Team Check", false, function(SetTeam)
        Aiming.TeamCheck = SetTeam
    end)
    
    local toggle13 = sector:AddToggle("DownedCheck", false, function()
    end)
    
    local dropdown = sector:AddDropdown("HitBox", {"Head", "UpperTorso", "LowerTorso",}, "HumanoidRootPart", function(SetPart)
        Aiming.TargetPart = SetPart
    end)
    
    
     local textbox = sector:AddTextbox("Prediction", false, function(SetPre)
        DaHoodSettings.Prediction = SetPre
    end)


    local toggle2 = sector2:AddToggle("Filled", false, function() 
    
    end)
    toggle2:AddColorpicker(Color3.new(), function(SetColour) 
        Aiming.FOVColour = SetColour
    end)
    
    
    local slider = sector2:AddSlider("Size", 0, 10, 100, 1, function(SetSize) 
        Aiming.FOV =  SetSize
    end)
    
    local button = sector2:AddSlider("Sides", 0, 10, 100, 1, function(SetSides) 
        Aiming.FOVSides = SetSides
    end)


    return library




